# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'Infra'

on:
  push:
  pull_request:
  
  workflow_dispatch:
    inputs:
      terraform_destroy:
        description: 'Destroy infra'
        required: true
        default: 'false'

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout  
      uses: actions/checkout@v4

    - name: Configure aws credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2.0.2
      
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: ./infra

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: |
        export TF_VAR_agent_ip="$(curl ifconfig.me; echo)/32"
        terraform plan -input=false
      working-directory: ./infra
      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: ${{ github.event.inputs.terraform_destroy  == 'false' }}
      run: |
        export TF_VAR_agent_ip="$(curl ifconfig.me; echo)/32"
        terraform apply -auto-approve -input=false
      working-directory: ./infra

    - name: Generate Kubeconfig
      if: ${{ github.event.inputs.terraform_destroy  == 'false' }}
      run: |
        aws eks update-kubeconfig --name eks-sre1 --region us-east-1 --kubeconfig kubeconfig
        cat kubeconfig
      working-directory: ./infra
    - name: Install argo
      uses: koslib/helm-eks-action@master
      if: ${{ github.event.inputs.terraform_destroy  == 'false' }}
      with:
        command: |
          kubectl create ns argocd --kubeconfig ./infra/kubeconfig
          kubectl apply -k "https://github.com/argoproj/argo-cd/manifests/crds?ref=v2.4.9" --kubeconfig ./infra/kubeconfig
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml --kubeconfig ./infra/kubeconfig

    - name: Install datadog
      uses: koslib/helm-eks-action@master
      if: ${{ github.event.inputs.terraform_destroy  == 'false' }}
      with:
        command: |
          helm repo add datadog https://helm.datadoghq.com
          helm install datadog-operator datadog/datadog-operator --kubeconfig ./infra/kubeconfig
          kubectl create secret generic datadog-secret --from-literal api-key=${{ secrets.DATADOG_API_KEY }} --kubeconfig ./infra/kubeconfig
          cat <<EOF | kubectl apply --kubeconfig ./infra/kubeconfig -f -
          kind: "DatadogAgent"
          apiVersion: "datadoghq.com/v2alpha1"
          metadata:
            name: "datadog"
          spec:
            global:
              site: "datadoghq.com"
              credentials:
                apiSecret:
                  secretName: "datadog-secret"
                  keyName: "api-key"
          EOF

    - name: Install OpenTelemetry
      uses: koslib/helm-eks-action@master
      
      if: ${{ github.event.inputs.terraform_destroy  == 'false' }}
      with:
        command: |
          helm repo add open-telemetry https://open-telemetry.github.io/opentelemetry-helm-charts
          ENABLE_WEBHOOKS="false"
          helm install otel-operator open-telemetry/opentelemetry-operator --set admissionWebhooks.create=false -n opentelemetry --create-namespace --kubeconfig ./infra/kubeconfig
          kubectl apply -f ./helm-charts/otel/otel-sidecar.yaml -n opentelemetry --kubeconfig ./infra/kubeconfig
    - name: Terraform Destroy
      if: ${{ github.event.inputs.terraform_destroy  == 'true' }}
      run: |
        export TF_VAR_agent_ip="$(curl ifconfig.me; echo)/32" 
        terraform destroy -auto-approve -input=false
      working-directory: ./infra      
    
